//https://www.youtube.com/watch?v=Jy_O8g9iiHI
/////////////////////////////////////////////////////////////////////////////////////////////////////
// COMPILE FLAGS 
// sudo g++ dht.c -o dht.sh `mysql_config --cflags` `mysql_config --libs` -L/usr/local/lib -lwiringPi
/////////////////////////////////////////////////////////////////////////////////////////////////////
// Last modified by Javier Gonzalez Ferreyra
// Date 17 May 2016 - 23:05
//
// SENSORS DEFINITIONS										  QTY
// DHT SENSORS (TEMP - HUM - DPOINT) - LIBRARY REQUIRED 	- 6
////////////////////////////////////////////////////////////////////////////////////////////////////
// DHT.c es exclusivo para sensores de H/T/DP, 
// Corre x Cron cada 1 minuto
//
// Script to run dht.sh
////////////////////////////////////////////////////////////////////////////////////////////////////

#define SMART_MONITOR_VER 0.1
#define MAXPORTS 28

#define DEBUG TRUE
#include "db_conn.h"
#include "db_insert.c"
#include "db_update.c"

//unsigned int availablePorts [MAXPORTS]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,
//										15,16,21,22,23,24,25,26,27,28,29,30,31};
// Ports 12, 13, 14 ,8 , 9 son I2C-SPI pueden traer conflictos, no los uso
// Ports 15, 16 son UART y no los uso
// Ports 0, 10, 11 , +28 disponibles para extensiones
										
unsigned int activePorts []={2,3,4,5,6,7};

/////////////////////////////////////////////////////////////////////////////////
////////////////////////////// START OF SETUP ///////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
int setup (void){
	
	if (!(initWiringPi())) 	// MUST BE CALLED FIRST-BEFORE EVERYTHING PIN RELATED
		return 0;
	else
		return 1;
}

/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////// END OF SETUP ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
//////////////////////////////START OF MAIN /////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

int main (int argc, char *argv[]){
	
	if (!(setup())){
		printf ("Begin ");
		timestamp();
		readActivePorts();
		printf ("End ");
		timestamp();
	}
	else
		return 1;
}
/////////////////////////////////////////////////////////////////////////////////
////////////////////////////// END OF MAIN //////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
//++++++++++++++++++++++ PIN PUD SETUP FUNCTION +++++++++++++++++++++++++++++++++
/////////////////////////////////////////////////////////////////////////////////
//USAGE of FUNCTION - void pullUpDnControl (int pin, int pud) ;

int setPinMode (void){
	unsigned int i;
	int size = sizeof (activePorts)/ sizeof (int);

	for (i=0 ; i < size ; i++)
		pinMode( activePorts[i], INPUT);
	
	return 0;
}

/////////////////////////////////////////////////////////////////////////////////
//----------------------- END PIN PUD SETUP FUNCTION ----------------------------
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
//++++++++++++++++++++++ INIT WIRINGPI FUNCTION +++++++++++++++++++++++++++++++++
/////////////////////////////////////////////////////////////////////////////////

int initWiringPi (void){

	if (wiringPiSetup () < 0){
		timestamp();
		printf ( "Error unable to setup wiringPi: %s\n", strerror (errno));
		return 1 ;
	}

	return 0;
}

/////////////////////////////////////////////////////////////////////////////////
//----------------------- END WIRINGPI FUNCTION ---------------------------------
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
//++++++++++++++++++++++ START READ PORTS FUNCTION ++++++++++++++++++++++++++++++
/////////////////////////////////////////////////////////////////////////////////
int readActivePorts (void){
	
	int size = sizeof (activePorts)/ sizeof (int);
	
	for  (int i=0 ; ((i < MAXPORTS) && (i < size)) ; i++){ 
		//printf ("%d \n",activePorts[i]);
		
		if (!mysql_connect ()){
			if(!displayDHTData (activePorts[i])){

				db_insert (0,i,temperature);
				db_update (0,i,0);

				db_insert (1,i,humidity);
				db_update (1,i,0);

				db_insert (4,i,dewPoint);
				db_update (4,i,0);
			}
			else{

				db_update (0,i,10);

				db_update (1,i,10);

				db_update (4,i,10);
			}
			mysql_disconnect ();
		}
	}

	return 0;
}

/////////////////////////////////////////////////////////////////////////////////
//----------------------- END READ PORTS FUNCTION -------------------------------
/////////////////////////////////////////////////////////////////////////////////
	
/////////////////////////////////////////////////////////////////////////////////
//++++++++++++++++++ START RESOLV PORT NAME FUNCTION ++++++++++++++++++++++++++++
/////////////////////////////////////////////////////////////////////////////////
// Function to convert sensor name and id to string
	
int resolvSensorID (short type, short id){
	short sid = id + 1;
	str[0] = '\0';	
	
	if (((type < 8) && (type >= 0)) && ((sid < 99) && (sid > 0))){
		strcat (str,sensorType[type]);
		sprintf (str+4, "%02d", sid);
		//printf ("%s\n",str);
	}
	else{
		printf ("Error Sensor Value type:%d / id:%d \n",type,sid);
		return 1;
	}
	return 0;
}

/////////////////////////////////////////////////////////////////////////////////
//--------------------- END RESOLV PORTS FUNCTION -------------------------------
/////////////////////////////////////////////////////////////////////////////////

//*******************************************************************************
//****************************** END C SCRIPT ***********************************
//*******************************************************************************